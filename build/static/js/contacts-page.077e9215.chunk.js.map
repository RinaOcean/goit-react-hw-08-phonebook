{"version":3,"sources":["components/ContactsList/ContactList.jsx","components/ContactListItem/ContactsListItem.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","pages/ContactsPage/ContactsPage.jsx"],"names":["ContactsList","children","className","connect","state","contactsItems","getFilteredContactList","dispatch","onDelete","id","removeContact","map","name","number","type","onClick","ContactForm","nameInputId","nanoid","numberInputId","handleChange","event","currentTarget","value","setState","handleSubmit","preventDefault","props","items","some","contact","alert","onSubmit","reset","this","htmlFor","pattern","title","required","onChange","Component","getItems","addContact","getFilterValue","addFilter","target","ContactsPage","fetchItems","length","isLoading","Spinner","animation","getLoadingItems","fetchContacts"],"mappings":"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","file":"static/js/contacts-page.077e9215.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\nimport './ContactsList.scss';\r\n\r\nconst ContactsList = ({ children }) => (\r\n  <ul className=\"ContactsList\">{children}</ul>\r\n);\r\n\r\nContactsList.propTypes = {\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default ContactsList;\r\n","import PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { removeContact, getFilteredContactList } from '../../redux/contacts';\r\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\r\n\r\nimport './ContactsListItem.scss';\r\n\r\nconst ContactsListItem = ({ onDelete, contactsItems }) => (\r\n  <>\r\n    {contactsItems.map(({ id, name, number }) => {\r\n      return (\r\n        <li key={id} className=\"ContactsListItem\">\r\n          {name}: {number}\r\n          <button type=\"button\" onClick={() => onDelete(id)}>\r\n            <DeleteForeverIcon />\r\n          </button>\r\n        </li>\r\n      );\r\n    })}\r\n  </>\r\n);\r\n\r\nContactsListItem.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }),\r\n  ),\r\n  onDelete: PropTypes.func,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  contactsItems: getFilteredContactList(state),\r\n});\r\n\r\nconst mapDispatchFromProps = dispatch => ({\r\n  onDelete: id => dispatch(removeContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchFromProps)(ContactsListItem);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { nanoid } from 'nanoid';\r\nimport PropTypes from 'prop-types';\r\nimport { addContact, getItems } from '../../redux/contacts';\r\n\r\nimport './ContactForm.scss';\r\n\r\nclass ContactForm extends Component {\r\n  static propTypes = {\r\n    name: PropTypes.string,\r\n    number: PropTypes.string,\r\n  };\r\n\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  nameInputId = nanoid();\r\n  numberInputId = nanoid();\r\n\r\n  handleChange = event => {\r\n    const { name, value } = event.currentTarget;\r\n\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n    const isInContacts = contact =>\r\n      contact.name === this.state.name || contact.number === this.state.number;\r\n\r\n    if (this.props.items.some(isInContacts)) {\r\n      alert(`Contact is already in contacts`);\r\n      return;\r\n    }\r\n    this.props.onSubmit({ ...this.state });\r\n    this.reset();\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({ name: '', number: '' });\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n    return (\r\n      <form className=\"ContactForm\" onSubmit={this.handleSubmit}>\r\n        <div className=\"TitleWrapper\">\r\n          <h1 className=\"Title\">Phonebook</h1>\r\n        </div>\r\n\r\n        <label htmlFor={this.nameInputId}>Name</label>\r\n        <input\r\n          type=\"text\"\r\n          value={name}\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n          onChange={this.handleChange}\r\n          id={this.nameInputId}\r\n        />\r\n        <label htmlFor={this.numberInputId}>Number</label>\r\n        <input\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          value={number}\r\n          pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\r\n          title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\r\n          required\r\n          onChange={this.handleChange}\r\n          id={this.numberInputId}\r\n        />\r\n        <button type=\"submit\">Add contact</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = state => ({\r\n  items: getItems(state),\r\n});\r\n\r\nconst mapDispatchFromProps = dispatch => ({\r\n  onSubmit: ({ name, number }) => dispatch(addContact({ name, number })),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchFromProps)(ContactForm);\r\n","import { connect } from 'react-redux';\r\nimport { addFilter, getFilterValue } from '../../redux/contacts';\r\n\r\nimport './Filter.scss';\r\n\r\nconst Filter = ({ value, onChange }) => (\r\n  <label className=\"Filter\">\r\n    Find contact by name\r\n    <input type=\"text\" value={value} onChange={onChange}></input>\r\n  </label>\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n  value: getFilterValue(state),\r\n});\r\n\r\nconst mapDispatchFromProps = dispatch => ({\r\n  onChange: event => dispatch(addFilter(event.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchFromProps)(Filter);\r\n","import { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport ContactsList from '..//..//components/ContactsList';\r\nimport ContactsListItem from '..//..//components/ContactListItem';\r\nimport ContactForm from '..//..//components/ContactForm';\r\nimport Filter from '..//..//components/Filter';\r\n\r\nimport Spinner from 'react-bootstrap/Spinner';\r\n\r\nimport { fetchContacts } from '..//..//redux/contacts/contacts-operations';\r\n\r\nimport {\r\n  getItems,\r\n  getLoadingItems,\r\n} from '../../redux/contacts/contacts-selectors';\r\n\r\nimport './ContactsPage.scss';\r\n\r\nclass ContactsPage extends Component {\r\n  componentDidMount() {\r\n    this.props.fetchItems();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <section>\r\n        <div className=\"PhonebookWrapper\">\r\n          <ContactForm />\r\n          <div className=\"ContactsWrapper\">\r\n            <h2 className=\"Title\">Contacts</h2>\r\n\r\n            {this.props.items.length > 0 ? (\r\n              <>\r\n                <Filter />\r\n\r\n                <ContactsList>\r\n                  {this.props.isLoading && <Spinner animation=\"border\" />}\r\n                  <ContactsListItem />\r\n                </ContactsList>\r\n              </>\r\n            ) : (\r\n              <span>You have no contacts yet </span>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </section>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = state => ({\r\n  items: getItems(state),\r\n  isLoading: getLoadingItems(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  fetchItems: () => dispatch(fetchContacts()),\r\n  // onGetCurrentUser: () => dispatch(getCurrentUser()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsPage);\r\n"],"sourceRoot":""}